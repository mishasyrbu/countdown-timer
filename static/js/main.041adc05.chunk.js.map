{"version":3,"sources":["components/CountdownDisplay/CountdownDisplay.module.scss","components/SpeedControls/index.ts","components/Button/Button.module.scss","components/Button/index.ts","components/StartControls/StartControls.module.scss","components/SpeedControls/SpeedControls.module.scss","components/SpeedControls/SpeedControls.tsx","components/Button/Button.tsx","components/SpeedControls/SpeedControls.const.ts","components/CountdownDisplay/CountdownDisplay.tsx","components/StartControls/StartControls.tsx","components/CountdownDisplay/index.ts","components/StartControls/index.ts","components/App/assets/audio/notification.ogg","components/App/assets/audio/notification.mp3","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","React","memo","props","className","onChange","classes","classNames","styles","speedControls","useState","TIMER_SPEED_MODE","X1","selectedMode","setSelectedMode","onButtonClick","mode","value","Object","values","map","key","name","button","type","onClick","isActive","Button","children","disabled","rest","active","event","preventDefault","X1P5","X2","CountdownDisplay","isOn","onPlayStop","initialTime","time","isFirstRun","setIsFirstRun","countdownDisplay","minutes","Math","floor","seconds","useEffect","timesUp","lessThanHalfLeft","messageInfo","redText","blink","renderInfoBox","countdown","playPause","pause","play","onStart","startControls","count","setCount","title","input","placeholder","pattern","target","validity","valid","Number","parseFloat","App","timer","audioNotificationRef","createRef","state","speed","startTimer","a","setState","setInterval","clearInterval","playNotification","stopTimer","current","onStartClick","onPlayStopClick","onSpeedChange","this","StartControls","SpeedControls","ref","src","require","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.041adc05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"countdownDisplay\":\"CountdownDisplay_countdownDisplay__2hTN-\",\"messageInfo\":\"CountdownDisplay_messageInfo__3n6Sr\",\"redText\":\"CountdownDisplay_redText__1Lc8Z\",\"blink\":\"CountdownDisplay_blink__3_Ibn\",\"blinker\":\"CountdownDisplay_blinker__1zWhv\",\"countdown\":\"CountdownDisplay_countdown__f27lf\",\"playPause\":\"CountdownDisplay_playPause__1E8ui\",\"play\":\"CountdownDisplay_play__LY0XP\",\"pause\":\"CountdownDisplay_pause__2C8jg\"};","export { default } from './SpeedControls';\nexport * from './SpeedControls.model';\nexport * from './SpeedControls.const';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\",\"primary\":\"Button_primary__I_9I9\",\"action\":\"Button_action__1zLpj\",\"active\":\"Button_active__h0ecc\",\"disabled\":\"Button_disabled__1f6YP\"};","export { default } from './Button';\nexport * from './Button.model';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"StartControls_title__2ISjh\",\"input\":\"StartControls_input__CcXp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"speedControls\":\"SpeedControls_speedControls__3SW5f\"};","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport Button from '../Button';\nimport { TIMER_SPEED_MODE, SpeedControlsProps, SpeedModeType } from '.';\nimport styles from './SpeedControls.module.scss';\n\nconst SpeedControls = (props: SpeedControlsProps) => {\n    const { className, onChange } = props;\n    const classes = classNames(styles.speedControls, className);\n    const [selectedMode, setSelectedMode] = useState<SpeedModeType>(TIMER_SPEED_MODE.X1);\n\n    const onButtonClick = (mode: SpeedModeType) => () => {\n        setSelectedMode(mode);\n        onChange(mode.value);\n    };\n\n    return (\n        <div className={classes}>\n            {Object.values(TIMER_SPEED_MODE).map((mode) => (\n                <Button\n                    key={mode.name}\n                    className={styles.button}\n                    type=\"action\"\n                    onClick={onButtonClick(mode)}\n                    isActive={selectedMode.name === mode.name}\n                >\n                    {mode.name}\n                </Button>\n            ))}\n        </div>\n    );\n};\n\nexport default React.memo(SpeedControls);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { ButtonProps } from '.';\nimport styles from './Button.module.scss';\n\nconst Button = (props: ButtonProps) => {\n    const {\n        className,\n        children,\n        onClick,\n        type = 'primary',\n        isActive = false,\n        disabled = false,\n        ...rest\n    } = props;\n    const classes = classNames(\n        styles.button,\n        { [styles.active]: isActive, [styles.disabled]: disabled },\n        className, styles[type]\n    );\n\n    const handleOnClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n        event.preventDefault();\n\n        !disabled && onClick(event);\n    };\n\n    return (\n        <button className={classes} onClick={handleOnClick} {...rest}>\n            {children}\n        </button>\n    );\n};\n\nexport default Button;\n","export const TIMER_SPEED_MODE = {\n    X1: {\n        name: '1X',\n        value: 1,\n    },\n    X1P5: {\n        name: '1.5X',\n        value: 1.5,\n    },\n    X2: {\n        name: '2X',\n        value: 2,\n    },\n};\n","import React, {useEffect, useState} from 'react';\nimport classNames from 'classnames';\n\nimport { CountdownDisplayProps } from '.';\nimport styles from './CountdownDisplay.module.scss';\n\nconst CountdownDisplay = (props: CountdownDisplayProps) => {\n    const { className, isOn = false, onPlayStop, initialTime, time } = props;\n    const [isFirstRun, setIsFirstRun] = useState<boolean>(true);\n    const classes = classNames(styles.countdownDisplay, className);\n    const minutes = Math.floor(time / 60);\n    const seconds = time - minutes * 60;\n\n    const onPlayPauseClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n\n        time > 0 && onPlayStop();\n    };\n\n    const renderInfoBox = () => {\n        const timesUp = time === 0;\n        const lessThanHalfLeft = !timesUp && initialTime && initialTime / 2 > time;\n        const classes = classNames(styles.messageInfo, {\n            [styles.redText]: !timesUp && time <= 20,\n            [styles.blink]: !timesUp && time <= 10,\n        });\n\n        return (\n            <div className={classes}>\n                {!isFirstRun && lessThanHalfLeft && <i>More than halfway there!</i>}\n                {!isFirstRun && timesUp && <i>Time’s up!</i>}\n            </div>\n        );\n    };\n\n    useEffect(() => {\n        if (time && isFirstRun) {\n            setIsFirstRun(false);\n        }\n    }, [time, isFirstRun]);\n\n    return (\n        <div className={classes}>\n            {renderInfoBox()}\n            <div className={styles.countdown}>\n                {minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}\n            </div>\n            {!!time && (\n                <button className={styles.playPause} onClick={onPlayPauseClick}>\n                    <div className={isOn ? styles.pause : styles.play} />\n                </button>\n            )}\n        </div>\n    );\n};\n\nexport default CountdownDisplay;\n","import React, {useState} from 'react';\nimport classNames from 'classnames';\n\nimport Button from '../Button';\nimport { StartControlsProps } from '.';\nimport styles from './StartControls.module.scss';\n\nconst StartControls = (props: StartControlsProps) => {\n    const { className, onStart } = props;\n    const classes = classNames(styles.startControls, className);\n    const [count, setCount] = useState<string>('');\n\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const { value, validity: { valid } } = event.target;\n\n        if (valid) {\n            setCount(value);\n        }\n    };\n\n    const onStartClick = () => {\n        if (count) {\n            onStart(Number.parseFloat(count));\n            setCount('');\n        }\n    };\n\n    return (\n        <div className={classes}>\n            <span className={styles.title}>Countdown:</span>\n            <input\n                className={styles.input}\n                placeholder=\"(Min)\"\n                type=\"text\"\n                pattern=\"[0-9]*\"\n                onChange={onInputChange}\n                value={count}\n            />\n            <Button disabled={!count} onClick={onStartClick}>START</Button>\n        </div>\n    );\n};\n\nexport default React.memo(StartControls);\n","export { default } from './CountdownDisplay';\nexport * from './CountdownDisplay.model';\n","export { default } from './StartControls';\nexport * from './StartControls.model';\n","module.exports = __webpack_public_path__ + \"static/media/notification.4654aff7.ogg\";","module.exports = __webpack_public_path__ + \"static/media/notification.90a6d5af.mp3\";","import React from 'react';\n\nimport { AppProps, AppState } from '.';\nimport SpeedControls from '../SpeedControls';\nimport CountdownDisplay from '../CountdownDisplay';\nimport StartControls from '../StartControls';\nimport './App.scss';\n\nclass App extends React.Component<AppProps, AppState> {\n    private timer: NodeJS.Timeout | null = null;\n    private audioNotificationRef = React.createRef<HTMLMediaElement>();\n\n    state = {\n        speed: 1000,\n        isOn: false,\n        initialTime: 0,\n        time: 0,\n    };\n\n    startTimer = async () => {\n        const { speed } = this.state;\n\n        await this.setState({ isOn: true });\n        this.timer = setInterval(() => {\n            this.setState(({ time }): AppState => {\n                if (time === 0) {\n                    this.timer && clearInterval(this.timer);\n                    this.playNotification();\n\n                    return { time, initialTime: null, isOn: false };\n                }\n\n                return { time: time - 1 };\n            });\n        }, speed);\n    };\n\n    stopTimer = async () => {\n        await this.setState({ isOn: false });\n        this.timer && clearInterval(this.timer);\n    };\n\n    playNotification = () => {\n        this.audioNotificationRef\n        && this.audioNotificationRef.current\n        && this.audioNotificationRef.current.play();\n    };\n\n    onStartClick = async (minutes: number) => {\n        const seconds = minutes * 60;\n\n        await this.stopTimer();\n        await this.setState({ initialTime: seconds, time: seconds });\n        this.startTimer();\n    };\n\n    onPlayStopClick = () => {\n        const { isOn } = this.state;\n\n        if (isOn) {\n            return this.stopTimer();\n        }\n\n        return this.startTimer();\n    };\n\n    onSpeedChange = async (value: number) => {\n        const { isOn } = this.state;\n\n        await this.setState({ speed: 1000 / value });\n\n        if (isOn) {\n            await this.stopTimer();\n            await this.startTimer();\n        }\n    };\n\n    render() {\n        const { isOn, initialTime, time } = this.state;\n\n        return (\n            <div className=\"app-container\">\n                <StartControls onStart={this.onStartClick} />\n                    <CountdownDisplay\n                        isOn={isOn}\n                        time={time}\n                        initialTime={initialTime}\n                        onPlayStop={this.onPlayStopClick}\n                    />\n                <SpeedControls onChange={this.onSpeedChange} />\n                <audio ref={this.audioNotificationRef}>\n                    <source src={require('./assets/audio/notification.ogg')} type=\"audio/ogg\" />\n                    <source src={require('./assets/audio/notification.mp3')} type=\"audio/mpeg\" />\n                </audio>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}