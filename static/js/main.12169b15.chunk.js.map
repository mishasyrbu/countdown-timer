{"version":3,"sources":["components/CountdownDisplay/CountdownDisplay.module.scss","components/SpeedControls/index.ts","components/Button/Button.module.scss","components/Button/index.ts","components/StartControls/StartControls.module.scss","components/SpeedControls/SpeedControls.module.scss","App/App.tsx","components/SpeedControls/SpeedControls.tsx","components/Button/Button.tsx","components/SpeedControls/SpeedControls.const.ts","components/CountdownDisplay/CountdownDisplay.tsx","components/StartControls/StartControls.tsx","App/index.ts","components/CountdownDisplay/index.ts","components/StartControls/index.ts","App/assets/audio/notification.mp3","serviceWorker.ts","index.tsx"],"names":["module","exports","App","timer","state","speed","isOn","initialTime","time","startTimer","a","setState","setInterval","clearInterval","playNotification","stopTimer","Audio","require","play","onStartClick","minutes","seconds","onPlayStopClick","onSpeedChange","value","this","className","onStart","onPlayStop","onChange","React","Component","memo","props","classes","classNames","styles","speedControls","useState","TIMER_SPEED_MODE","X1","selectedMode","setSelectedMode","onButtonClick","mode","Object","values","map","key","name","button","type","onClick","isActive","Button","children","disabled","rest","active","event","preventDefault","X1P5","X2","CountdownDisplay","isFirstRun","setIsFirstRun","countdownDisplay","Math","floor","useEffect","timesUp","lessThanHalfLeft","messageInfo","redText","blink","renderInfoBox","countdown","playPause","pause","startControls","count","setCount","title","input","placeholder","pattern","target","validity","valid","Number","parseFloat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12169b15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"countdownDisplay\":\"CountdownDisplay_countdownDisplay__2hTN-\",\"messageInfo\":\"CountdownDisplay_messageInfo__3n6Sr\",\"redText\":\"CountdownDisplay_redText__1Lc8Z\",\"blink\":\"CountdownDisplay_blink__3_Ibn\",\"blinker\":\"CountdownDisplay_blinker__1zWhv\",\"countdown\":\"CountdownDisplay_countdown__f27lf\",\"playPause\":\"CountdownDisplay_playPause__1E8ui\",\"play\":\"CountdownDisplay_play__LY0XP\",\"pause\":\"CountdownDisplay_pause__2C8jg\"};","export { default } from './SpeedControls';\nexport * from './SpeedControls.model';\nexport * from './SpeedControls.const';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\",\"primary\":\"Button_primary__I_9I9\",\"action\":\"Button_action__1zLpj\",\"active\":\"Button_active__h0ecc\",\"disabled\":\"Button_disabled__1f6YP\"};","export { default } from './Button';\nexport * from './Button.model';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"startControls\":\"StartControls_startControls__1U0Fa\",\"title\":\"StartControls_title__2ISjh\",\"input\":\"StartControls_input__CcXp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"speedControls\":\"SpeedControls_speedControls__3SW5f\"};","import React from 'react';\n\nimport { AppProps, AppState } from './index';\nimport SpeedControls from '../components/SpeedControls';\nimport CountdownDisplay from '../components/CountdownDisplay';\nimport StartControls from '../components/StartControls';\nimport './App.scss';\n\nclass App extends React.Component<AppProps, AppState> {\n    timer: NodeJS.Timeout | null = null;\n\n    state = {\n        speed: 1000,\n        isOn: false,\n        initialTime: 0,\n        time: 0,\n    };\n\n    startTimer = async () => {\n        const { speed } = this.state;\n\n        await this.setState({ isOn: true });\n        this.timer = setInterval(() =>\n            this.setState(({ time }): AppState => {\n                if (time === 0) {\n                    this.timer && clearInterval(this.timer);\n                    this.playNotification();\n\n                    return { time, initialTime: null, isOn: false };\n                }\n\n                return { time: time - 1 };\n            }), speed);\n    };\n\n    stopTimer = async () => {\n        await this.setState({ isOn: false });\n        this.timer && clearInterval(this.timer);\n    };\n\n    playNotification = () => {\n        const soundEffect = new Audio(require('./assets/audio/notification.mp3'));\n        return soundEffect.play();\n    };\n\n    onStartClick = async (minutes: number) => {\n        const seconds = minutes * 60;\n\n        await this.stopTimer();\n        await this.setState({ initialTime: seconds, time: seconds });\n        await this.startTimer();\n    };\n\n    onPlayStopClick = () => {\n        const { isOn } = this.state;\n\n        isOn ? this.stopTimer() : this.startTimer();\n    };\n\n    onSpeedChange = async (value: number) => {\n        const { isOn } = this.state;\n\n        await this.setState({ speed: 1000 / value });\n\n        if (isOn) {\n            await this.stopTimer();\n            await this.startTimer();\n        }\n    };\n\n    render() {\n        const { isOn, initialTime, time } = this.state;\n\n        return (\n            <div className=\"app-container\">\n                <StartControls onStart={this.onStartClick} />\n                    <CountdownDisplay\n                        isOn={isOn}\n                        time={time}\n                        initialTime={initialTime}\n                        onPlayStop={this.onPlayStopClick}\n                    />\n                <SpeedControls onChange={this.onSpeedChange} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport Button from '../Button';\nimport { TIMER_SPEED_MODE, SpeedControlsProps, SpeedModeType } from '.';\nimport styles from './SpeedControls.module.scss';\n\nconst SpeedControls = (props: SpeedControlsProps) => {\n    const { className, onChange } = props;\n    const classes = classNames(styles.speedControls, className);\n    const [selectedMode, setSelectedMode] = useState<SpeedModeType>(TIMER_SPEED_MODE.X1);\n\n    const onButtonClick = (mode: SpeedModeType) => () => {\n        setSelectedMode(mode);\n        onChange(mode.value);\n    };\n\n    return (\n        <div className={classes}>\n            {Object.values(TIMER_SPEED_MODE).map((mode) => (\n                <Button\n                    key={mode.name}\n                    className={styles.button}\n                    type=\"action\"\n                    onClick={onButtonClick(mode)}\n                    isActive={selectedMode.name === mode.name}\n                >\n                    {mode.name}\n                </Button>\n            ))}\n        </div>\n    );\n};\n\nexport default React.memo(SpeedControls);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { ButtonProps } from '.';\nimport styles from './Button.module.scss';\n\nconst Button = (props: ButtonProps) => {\n    const {\n        className,\n        children,\n        onClick,\n        type = 'primary',\n        isActive = false,\n        disabled = false,\n        ...rest\n    } = props;\n    const classes = classNames(\n        styles.button,\n        { [styles.active]: isActive, [styles.disabled]: disabled },\n        className, styles[type]\n    );\n\n    const handleOnClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n        event.preventDefault();\n\n        !disabled && onClick(event);\n    };\n\n    return (\n        <button className={classes} onClick={handleOnClick} {...rest}>\n            {children}\n        </button>\n    );\n};\n\nexport default Button;\n","export const TIMER_SPEED_MODE = {\n    X1: {\n        name: '1X',\n        value: 1,\n    },\n    X1P5: {\n        name: '1.5X',\n        value: 1.5,\n    },\n    X2: {\n        name: '2X',\n        value: 2,\n    },\n};\n","import React, {useEffect, useState} from 'react';\nimport classNames from 'classnames';\n\nimport { CountdownDisplayProps } from '.';\nimport styles from './CountdownDisplay.module.scss';\n\nconst CountdownDisplay = (props: CountdownDisplayProps) => {\n    const { className, isOn = false, onPlayStop, initialTime, time } = props;\n    const [isFirstRun, setIsFirstRun] = useState<boolean>(true);\n    const classes = classNames(styles.countdownDisplay, className);\n    const minutes = Math.floor(time / 60);\n    const seconds = time - minutes * 60;\n\n    const onPlayPauseClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n\n        time > 0 && onPlayStop();\n    };\n\n    const renderInfoBox = () => {\n        const timesUp = time === 0;\n        const lessThanHalfLeft = !timesUp && initialTime && initialTime / 2 > time;\n        const classes = classNames(styles.messageInfo, {\n            [styles.redText]: !timesUp && time <= 20,\n            [styles.blink]: !timesUp && time <= 10,\n        });\n\n        return (\n            <div className={classes}>\n                {!isFirstRun && lessThanHalfLeft && <i>More than halfway there!</i>}\n                {!isFirstRun && timesUp && <i>Time’s up!</i>}\n            </div>\n        );\n    };\n\n    useEffect(() => {\n        if (time && isFirstRun) {\n            setIsFirstRun(false);\n        }\n    }, [time, isFirstRun]);\n\n    return (\n        <div className={classes}>\n            {renderInfoBox()}\n            <div className={styles.countdown}>\n                {minutes < 10 ? `0${minutes}` : minutes}:{seconds < 10 ? `0${seconds}` : seconds}\n            </div>\n            {!!time && (\n                <button className={styles.playPause} onClick={onPlayPauseClick}>\n                    <div className={isOn ? styles.pause : styles.play} />\n                </button>\n            )}\n        </div>\n    );\n};\n\nexport default CountdownDisplay;\n","import React, {useState} from 'react';\nimport classNames from 'classnames';\n\nimport Button from '../Button';\nimport { StartControlsProps } from '.';\nimport styles from './StartControls.module.scss';\n\nconst StartControls = (props: StartControlsProps) => {\n    const { className, onStart } = props;\n    const classes = classNames(styles.startControls, className);\n    const [count, setCount] = useState<string>('');\n\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const { value, validity: { valid } } = event.target;\n\n        if (valid) {\n            setCount(value);\n        }\n    };\n\n    const onStartClick = () => {\n        if (count) {\n            onStart(Number.parseFloat(count));\n            setCount('');\n        }\n    };\n\n    return (\n        <div className={classes}>\n            <span className={styles.title}>Countdown:</span>\n            <input\n                className={styles.input}\n                placeholder=\"(Min)\"\n                type=\"text\"\n                pattern=\"[0-9]*\"\n                onChange={onInputChange}\n                value={count}\n            />\n            <Button disabled={!count} onClick={onStartClick}>START</Button>\n        </div>\n    );\n};\n\nexport default React.memo(StartControls);\n","export { default } from './App';\nexport * from './App.model';\n","export { default } from './CountdownDisplay';\nexport * from './CountdownDisplay.model';\n","export { default } from './StartControls';\nexport * from './StartControls.model';\n","module.exports = __webpack_public_path__ + \"static/media/notification.90a6d5af.mp3\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}